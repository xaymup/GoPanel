{{extends "../templates/view.jet"}}
{{block title()}}Sites{{end}}
{{ block container() }}
<div id="app" class="flex-row ml-3">
<div class="relative inline-block text-left">
    <button type="button"  @click="toggleDropdown" ref="dropdown" class="transition-all min-w-[43rem] bg-white text-gray-700 py-2 px-4 border-2 border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" id="dropdownButton">
                        <span v-if="selectedItem" v-text="selectedItem.site_name"></span>
                  <span v-else>Select an item</span><svg class="w-2.5 h-2.5 ms-3 inline" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
            </svg>
    </button>
    <!-- Dropdown Menu -->
    <div id="dropdownMenu" v-if="isDropdownVisible" class="absolute min-w-[43rem] z-10 bg-white divide-y divide-gray-100 rounded-lg shadow w-44">
    <ul v-for="site in sites" :key="site.id" @click="selectItem(site)" class="text-sm text-gray-700" aria-labelledby="dropdownDefaultButton">
      <li>
        <a v-text="site.site_name" href="#" class="transition-all block px-4 py-2 hover:bg-gray-100"></a>
      </li>
    </ul>
    </div>
    <button type="button" class="bg-blue-500 text-white py-2 px-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
        Create site
    </button>
</div>
<div class="mt-6 flex flex-wrap">
    <div class="flex-row max-w-xs px-2 py-2">
        <div class="font-semibold">Site name: </div><p class="text-xs w-full py-2 px-3 text-gray-700" id="name">My awesome site <a href="#" class="mx-2">✏️</a></p>
    </div>
    <div class="flex-row max-w-xs px-2 py-2">
        <div class="font-semibold">Domains: </div>
        <ul class="text-xs">
            <li class="text-gray-700 py-1 px-3 w-max">example.com<a href="#" class="mx-2">✖</a></li>
              
            <li class="text-gray-700 py-1 px-3 w-max">www.example.com<a href="#" class="mx-2">✖</a></li>
        </ul>
        <div class="flex-row">
            <input class="flex-col text-xs mr-2 w-40 appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="domain" type="text" placeholder="example.com"><button class="bg-blue-500 text-white p-2 rounded-lg flex-col text-xs">Add</button>
        </div>
    </div>
    <div class="flex-row max-w-xs px-2 py-2">
        <div class="font-semibold">Root Directory: </div><p class="text-xs w-full py-2 px-3 text-gray-700" id="name">/var/www/site1 <a href="#" class="mx-2">✏️</a></p>
    </div>
    <div class="flex-row max-w-xs px-2 py-2">
        <div class="font-semibold">PHP version: </div>    <button type="button" class="transition-all bg-white text-xs text-gray-700 py-2 px-4 border-2 border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" id="dropdownButton">
            Select an option  <svg class="w-2.5 h-2.5 ms-3 inline" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
                </svg>
        </button>

    </div>
</div>
  <script>
   new Vue({
      el: '#app',
      data() {
        return {
          isDropdownVisible: false,
          selectedItem: null,
          sites: []
        };
      },
      methods: {
        async fetchListItems() {
          try {
            const response = await fetch('http://localhost:1337/api/list-sites', {
              method: 'GET',
              credentials: 'include' // Include credentials with the request
            });

            if (!response.ok) {
              throw new Error('Network response was not ok');
            }

            const sites = await response.json();
            this.sites = sites;
          } catch (error) {
            console.error('Error fetching the list items:', error);
          }
        },
        toggleDropdown() {
          this.isDropdownVisible = !this.isDropdownVisible;
        },
        selectItem(site) {
          this.selectedItem = site;
          this.isDropdownVisible = false;
        },
        handleClickOutside(event) {
          if (this.$refs.dropdown && !this.$refs.dropdown.contains(event.target)) {
            this.isDropdownVisible = false;
            }
        }
      },
      mounted() {
        this.fetchListItems();
        console.log(this.sites.length);

        setTimeout(() => {this.selectItem(this.sites[0]);}, 200);

        document.addEventListener('click', this.handleClickOutside);
      },
      beforeDestroy() {
        document.removeEventListener('click', this.handleClickOutside);
      }
    });
  </script>
{{ end }}