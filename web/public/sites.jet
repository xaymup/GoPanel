{{extends "../templates/view.jet"}}
{{block title()}}Sites{{end}}
{{ block container() }}
<div class="flex-row w-[50.4rem] ml-3">
  <div class="relative inline-block flex justify-between text-left">
    <button type="button" @click="toggleDropdown" ref="dropdown"
      class="transition-all text-sm min-w-[13rem] bg-white text-gray-700 py-2 px-4 border-2 border-gray-200 text-left rounded-lg outline-none"
      id="dropdownButton">
      <div class="flex justify-between">
        <span v-if="selectedItem.site_name" v-text="selectedItem.site_name" class="text-gray-700 font-semibold"></span>
        <span v-else>Select site</span>
        <svg class="mt-1 w-2.5 h-2.5 ms-3 inline" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
          viewBox="0 0 10 6">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="m1 1 4 4 4-4" />
        </svg>
      </div>
    </button>
    <div class="flex flex-row">
      <button v-if="isDisabled" @click="enableTextField" class="flex text-xs m-2">‚úèÔ∏è Edit</button>
      <button v-else="isDisabled" @click="saveSiteConf" class="flex text-xs m-2">üíæ Save</button>
      <button @click="removeSite" class="flex text-xs m-2">‚úñ Delete</button>
      <button @click="addSite" type="button" class="flex text-xs m-2">‚ûï Create</button>
    </div>
  </div>
  <transition @before-enter="beforeEnter" @enter="enter" @leave="leave">
    <div id="dropdownMenu" v-if="isDropdownVisible"
      class="min-w-[13rem] shadow absolute z-10 bg-white divide-y divide-gray-100 border-1 border-blue-500 rounded-lg">
      <div v-for="site in sites" :key="site.id" @click="selectItem(site)" class="text-sm text-gray-700"
        aria-labelledby="dropdownDefaultButton">
        <a v-text="site.site_name"
          class="font-semibold cursor-pointer transition-all block px-4 py-2 hover:bg-gray-100"></a>
      </div>
    </div>
  </transition>

  <transition @before-enter="beforeEnter" @enter="enter" @leave="leave">
    <div v-if="showToolkit" class="mt-6 flex flex-wrap">
      <div class="flex-col w-[201.6px] flex max-w-xs px-2 py-2">
        <div class="flex-row inline-block font-semibold">Site Name: </div>
        <div class="flex flex-nowrap">
          <input type="text" v-model="selectedItem.site_name"
            class="disabled:border-0 disabled:bg-white text-xs w-full py-2 px-3 flex-col mr-2 w-40 appearance-none border-b py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="name" :disabled="isDisabled">
        </div>
      </div>
      <div class="flex-col w-[201.6px] flex max-w-xs px-2 py-2">
        <div class="flex-row font-semibold inline-block">Domains: </div>
        <div v-for="(domain, index) in selectedItem.domains" :key="domain.id" class="flex-row flex">
          <div class="flex flex-row flex-nowrap"><input v-model="domain"
              class="disabled:border-0 disabled:bg-white flex text-xs w-full py-2 px-3 flex-col mr-2 w-40 appearance-none border-b py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="name" disabled></div><button @click="removeDomain(index)" class="flex-col text-xs w-4"
            :hidden="isDisabled">‚úñ</button>
        </div>
        <div class="flex-row flex">
          <input v-model="domainFeild"
            class="disabled:border-0 disabled:bg-white text-xs w-full py-2 px-3 flex-col mr-2 w-40 appearance-none border-b py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="domain" type="text" placeholder="example.com" :hidden="isDisabled"><button @click="addDomain"
            class="text-white flex-col text-xs" :hidden="isDisabled">‚ûï</button>
        </div>
      </div>
      <div class="flex-col w-[201.6px] flex max-w-xs px-2 py-2">
        <div class="flex-row flex font-semibold inline-block">Root Directory: </div>

        <div class="flex flex-col flex-nowrap"><input v-model="selectedItem.path"
            class="disabled:border-0 disabled: bg-white text-xs w-full py-2 px-3 flex-col mr-2 w-40 appearance-none border-b py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="path" :disabled="isDisabled"></div>

      </div>
      <div class="flex-row w-[201.6px] max-w-xs px-2 py-2">
        <div class="font-semibold">PHP version: </div> <button type="button" v-text="selectedItem.php_version"
          class="disabled:border-0 bg-white text-xs text-gray-700 py-2 px-4 border-b border-gray-200 outline-none"
          :disabled="isDisabled" id="dropdownButton">
          Select an option <div :hidden="isDisabled"><svg class="w-2.5 h-2.5 ms-3 inline" aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="m1 1 4 4 4-4" />
            </svg></div>
        </button>
      </div>
    </div>
</div>
</transition>

<div v-if="!showToolkit" class="w-[50.4rem]" ></div>

<script>
    new Vue({
      el: '#app',
      data() {
        return {
          domainFeild: "",
          isDropdownVisible: false,
          selectedItem: {},
          sites: [],
          isDisabled: true,
          showToolkit: false,
          siteNum: 1
        };
      },
      methods: {
        async fetchListItems() {
          try {
            const response = await fetch('http://localhost:1337/api/list-sites', {
              method: 'GET',
              credentials: 'include' // Include credentials with the request
            });

            if (!response.ok) {
              throw new Error('Network response was not ok');
            }

            const sites = await response.json();
            if (sites !== null) {
              this.sites = sites;
            }
          } catch (error) {
            console.error('Error fetching the list items:', error);
          }
        },
        async saveSiteConf() {
          // Prepare the data object
          const data = this.sites;

          try {
            // Make the POST request using axios
            const response = await axios.post('http://localhost:1337/api/write-siteconf', data, {
              withCredentials: true // Include credentials with the request
            });
            console.log('Response:', response.data);

          } catch (error) {
            console.error('Error submitting form:', error);

          }
          this.fetchListItems();
          this.disableTextField()
        },
        addSite() {
          newSite = {
            site_name: "New site " + this.siteNum,
            domains: [],
            path: "",
            php_version: "8.1"
          };
          this.sites.push(newSite);
          this.siteNum += 1;
          this.selectItem(newSite);
          this.enableTextField();
        },
        async removeSite() {
          if (this.sites.length > 1) {
            let siteToRemove = this.sites.indexOf(this.selectedItem);
            this.sites.splice(siteToRemove, 1);
            if (siteToRemove < (this.sites.length)) {
              this.selectItem(this.sites[siteToRemove]);
            } else {
              this.selectItem(this.sites[siteToRemove - 1]);
            }
            this.enableTextField()
          }

        },
        addDomain() {
          if (this.domainFeild.trim()) {
            // Append the new item to the items array
            if (this.isValidDomain(this.domainFeild.trim())) {
              this.selectedItem.domains.push(this.domainFeild.trim());
              // Clear the text field
              this.domainFeild = '';
            }

          }
        },
        isValidDomain(domain) {
          const domainPattern = /^(?!-)[A-Za-z0-9-]{1,63}(?<!-)\.(?!-)[A-Za-z0-9.-]{2,253}(?<!-)$/;
          return domainPattern.test(domain);
        },
        removeDomain(index) {
          this.selectedItem.domains.splice(index, 1);
        },
        toggleDropdown() {
          this.isDropdownVisible = !this.isDropdownVisible;
        },
        async enableTextField() {
          this.isDisabled = false;
        },
        async disableTextField() {
          this.isDisabled = true;
        },
        async selectItem(site) {
          this.selectedItem = site;
          history.pushState(null, '', "/sites/" + this.selectedItem.site_name.replace(/ /g, '_'));


          this.isDropdownVisible = false;
          this.showToolkit = true;
        },
        handleClickOutside(event) {
          if (this.$refs.dropdown && !this.$refs.dropdown.contains(event.target)) {
            this.isDropdownVisible = false;
          }
        },
        beforeEnter(el) {
          el.style.opacity = 0;
        },
        enter(el, done) {
          el.offsetHeight; // Trigger a reflow to ensure transition is applied
          el.style.transition = 'opacity 0.3s';
          el.style.opacity = 1;
          done();
        },
        leave(el, done) {
          el.style.transition = 'opacity 0.3s';
          el.style.opacity = 0;
          done();
        }
      },
      async created() {
        await this.fetchListItems();

        if (window.location.pathname.split("/")[2]) {
          const siteNameFromPath = window.location.pathname.split("/")[2].replace(/_/g, ' ');
          this.selectedItem = this.sites.find(obj => obj.site_name === window.location.pathname.split("/")[2].replace(/_/g, ' '));
          this.showToolkit = true;
        }
      },
      mounted() {
        document.addEventListener('click', this.handleClickOutside);

      },
      beforeDestroy() {
        document.removeEventListener('click', this.handleClickOutside);
      }
    });
</script>
{{ end }}