{{extends "../templates/view.jet"}}
{{block title()}}File Manager{{end}}
{{ block container() }}
    <div class="flex-1 p-2">
        <!-- Header -->
        <header class="flex-row flex  mb-2">
            <button @click="goBack" class="flex">
            ‚¨ÖÔ∏è Back
            </button>
            <input v-model="path" class="flex w-full h-8 text-xs w-42 py-2 px-3 flex-col mr-2 w-40 appearance-none border-b py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="path"></div>
            <button @click="fetchFiles" class="flex">
            üìÅ Go
            </button>
        </header>

        <!-- File List -->
        <div class="w-full h-96 overflow-y-auto bg-white rounded-lg shadow">
            <table class="w-full divide-y divide-gray-200">
                <thead class="bg-gray-50 text-xs">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Size</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date Modified</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Owner</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Permission</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200" @contextmenu.prevent="handleRightClick">
                    <tr v-for="file in files" :key="file.name">
                        <td  @click.prevent="updatePath(file.name)" v-if="file.type === 'directory'" v-text="file.name" class="truncate w-44 max-w-44 pl-6 py-4 whitespace-nowrap text-xs font-medium text-gray-900"></td>
                        <td v-else v-text="file.name" class="truncate w-44 max-w-44 pl-6 py-4 whitespace-nowrap text-xs font-medium text-gray-900"></td>
                        <td v-text="file.size" class="pl-6 py-4 whitespace-nowrap text-xs text-gray-500"></td>
                        <td v-text="file.type" class="pl-6 py-4 whitespace-nowrap text-xs text-gray-500"></td>
                        <td v-text="file.modified" class="pl-6 py-4 whitespace-nowrap text-xs text-gray-500"></td>
                        <td v-text="file.owner" class="pl-6 py-4 whitespace-nowrap text-xs text-gray-500"></td>
                        <td v-text="file.permissions" class="pl-6 py-4 whitespace-nowrap text-xs text-gray-500"></td>
                    </tr>
                    <!-- Repeat for more files -->
                </tbody>
            </table>
        </div>
    </div>


<script>
       new Vue({
      el: '#app',
      data() {
        return {
            path: "/",
            files: [],
            file: {}
        };
      },
      mounted() {
         this.fetchFiles();
      },
      methods: {
        async fetchFiles() {
          try {
            const response = await fetch(`http://localhost:1337/api/list-files?path=${encodeURIComponent(this.path)}`, {
              method: 'GET',
              credentials: 'include' // Include credentials with the request
            });

            if (!response.ok) {
              throw new Error('Network response was not ok');
            }

            this.files = await response.json();

          } catch (error) {
            console.error('Error fetching the list items:', error);
          }
        },
      async updatePath(name){
        if (!this.path.endsWith('/')) {
          this.path = this.path + "/" + name;
        } else {
          this.path = this.path + name;
        }
        
        this.fetchFiles();
      },
      async goBack(){

        if (this.path !== '' && this.path !== '/') {
            // Remove trailing slashes and split the path into segments
            this.path = this.path.replace(/\/+$/, '');
            const segments = this.path.split('/');

            // Remove the last segment
            segments.pop();

            // Join the remaining segments back into a path
            this.path = segments.join('/');

            // Handle the case where the path becomes empty
            if (this.path === '') {
              this.path = '/';
            }

            // Fetch files with the updated path
            this.fetchFiles();
        }

      },
      async handleRightClick(){

      }
    }
    });
</script>
</script>
{{ end }}