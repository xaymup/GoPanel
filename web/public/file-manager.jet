{{extends "../templates/view.jet"}}
{{block title()}}File Manager{{end}}
{{ block container() }}
    <div class="flex-1 p-2">
        <!-- Header -->
        <header class="flex-row flex items-center justify-center mb-2">
            <button @click="goBack" class="flex w-auto text-xs">
            ‚¨ÖÔ∏è Back
            </button>
            <input @keyup.enter="fetchFiles" v-model="path" class="flex-1 w-full h-8 text-xs w-42 py-2 px-3 flex-col mr-2 w-40 appearance-none border-b py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="path"></div>
            <div class="flex-row flex flex-row mb-2 p-2 flex text-xs items-center justify-center" v-if="renaming">‚úçÔ∏è Rename: <input @keyup.enter="applyRename" v-model="selectedFileName" class="flex-1 w-full h-8 text-xs w-42 py-2 px-3 flex-col mr-2 w-40 appearance-none border-b py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"><button @click="applyRename" class="flex-col text-xs w-4">‚úîÔ∏è</button></div>
            <button @click="fixPermissions" class="items-center mx-1 mb-2 justify-center flex w-auto text-xs">
              üö¶ Fix Permissions
            </button>
            <button @click="triggerFileInput" class="items-center mx-1 mb-2 justify-center flex w-auto text-xs">
              üì§ Upload
            </button>
            <input class="hidden" ref="fileInput" type="file" @change="handleFileChange" />
        </header>

        

        <transition
        @before-enter="beforeEnter"
        @enter="enter"
        @leave="leave">
        <div ref="dropdown" id="dropdownMenu" v-show="isDropdownVisible" :style="{ top: `${menuPosition.y}px`, left: `${menuPosition.x}px` }" class="min-w-[13rem] shadow absolute z-10 bg-white divide-y divide-gray-100 border-1 border-blue-500 rounded-lg">
              <a @click="openEditor" v-show="isFile" v-text="'‚úèÔ∏è Edit'" class="text-xs cursor-pointer transition-all block px-4 py-2 hover:bg-gray-100"></a>
              <a @click="rename" v-text="'‚úçÔ∏è Rename'" class="text-xs cursor-pointer transition-all block px-4 py-2 hover:bg-gray-100"></a>
              <a @click="compress" v-text="'üì¶ Compress'" class="text-xs cursor-pointer transition-all block px-4 py-2 hover:bg-gray-100"></a>
              <a @click="extract" v-show="isCompressed" v-text="'üì§ Extract'" class="text-xs cursor-pointer transition-all block px-4 py-2 hover:bg-gray-100"></a>
              <a @click="download" v-show="isFile" v-text="'üíæ Download'" class="text-xs cursor-pointer transition-all block px-4 py-2 hover:bg-gray-100"></a>
              <a @click="cut" v-text="'‚úÇÔ∏è Cut'" class="text-xs cursor-pointer transition-all block px-4 py-2 hover:bg-gray-100"></a>
              <a @click="copy" v-text="'üìë Copy'" class="text-xs cursor-pointer transition-all block px-4 py-2 hover:bg-gray-100"></a>
              <a @click="paste" v-text="'üìã Paste'" class="text-xs cursor-pointer transition-all block px-4 py-2 hover:bg-gray-100"></a>
              <a @click="deleteFile" v-text="'üóëÔ∏è Delete'" class="text-red-500 text-xs cursor-pointer transition-all block px-4 py-2 hover:bg-gray-100"></a>
        </div>
        </transition>


        <transition
        @before-enter="beforeEnter"
        @enter="enter"
        @leave="leave">
        <div v-if="isModalOpen" id="fileEditorModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-lg">
            <h2 v-text="selectedFile" class="text-xs font-semibold mb-4"></h2>
            <div class="flex border border-gray-300 rounded-md h-96 overflow-hidden">
              <div class="bg-gray-100 text-gray-500 p-2 text-right pr-4 flex-shrink-0 min-w-10 flex-1" :style="scrollbarStyles">
                <div v-for="line in lineCount" class="text-xs font-mono mb-5" v-text="lineNumbers" :key="line"></div>
              </div>
              <textarea id="editor" v-model="fileContent" @input="updateLineCount" @scroll="syncScroll" @keydown="handleTab" class="resize-none outline-none font-mono text-xs w-full p-2 border border-gray-300 rounded-tr-md rounded-br-md whitespace-pre" placeholder="Write something..."></textarea>
            </div>
            <div class="mt-4 flex justify-end space-x-4">
              <button @click="saveFile" id="saveBtn" class="text-xs">üíæ Save</button>
              <button @click="closeEditor" id="cancelBtn" class="text-xs">‚ùå Cancel</button>
            </div>
          </div>
        </div>
        </transition>

        <!-- File List -->
        <div class="w-full h-96 overflow-y-auto bg-white rounded-lg shadow">
            <table class="w-full divide-y divide-gray-200">
                <thead class="bg-gray-50 text-xs">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Size</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date Modified</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Owner</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Permission</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    <tr v-for="file in files" :key="file.name"  @contextmenu.prevent="handleRightClick(file)">
                        <td v-else @click.prevent="updatePath(file.name)" v-if="file.type === 'directory'" v-text="'üìÅ '+file.name" class="cursor-pointer underline w-44 max-w-44 pl-6 py-4 whitespace-nowrap text-xs font-medium text-gray-900"></td>
                        <td v-else v-text="'üìÑ '+file.name" class="cursor-default truncate w-44 max-w-44 pl-6 py-4 whitespace-nowrap text-xs font-medium text-gray-900"></td>
                        <td v-text="file.size" class="pl-6 py-4 whitespace-nowrap text-xs text-gray-500"></td>
                        <td v-text="file.type" class="min-w-40 pl-6 py-4 whitespace-nowrap text-xs text-gray-500"></td>
                        <td v-text="file.modified" class="pl-6 py-4 whitespace-nowrap text-xs text-gray-500"></td>
                        <td v-text="file.owner" class="pl-6 py-4 whitespace-nowrap text-xs text-gray-500"></td>
                        <td v-text="file.permissions" class="pl-6 py-4 whitespace-nowrap text-xs text-gray-500"></td>
                    </tr>
                    <!-- Repeat for more files -->
                </tbody>
            </table>
        </div>
    </div>


<script>
        new Vue({
          el: '#app',
          data() {
            return {
              path: "/",
              files: [],
              file: null,
              uploadStatus: '',
              isDropdownVisible: false,
              menuPosition: { x: 0, y: 0 },
              selectedFile: '',
              isCompressed: false,
              isFile: false,
              renaming: false,
              operation: '',
              fileToOperate: "",
              selectedFileName: "",
              lineCount: 1,
              fileContent: ``,
              isModalOpen: false
            }
          },
          mounted() {
            this.fetchFiles();
            document.addEventListener('click', this.handleClickOutside);
          },
          computed: {
        lineNumbers() {
          const lines = this.fileContent.split('\n').length;
          // lines.forEach(line => {
          // if (line.length > maxWidth) {
          //     longLines++;
          //     // You can handle long lines here, e.g., log them or store them
          //     console.log(`Line exceeds ${maxWidth} characters: ${line}`);
          //   }
          // });


          // return lines.map((line, i) => {
          //   return (line.length > 69) ? i + 1 + '\n‚ÄÉ'.repeat(line.length/69) : i + 1;
          // }).join('\n');

          return Array.from({ length: lines }, (_, i) => i + 1).join('\n');
          },
        scrollbarStyles() {
          return {
            overflowY: 'hidden', // Allow scrolling
            scrollbarWidth: 'none', // Hide scrollbar for Firefox
            msOverflowStyle: 'none', // Hide scrollbar for IE and Edge
            // WebKit browsers
            WebkitOverflowScrolling: 'touch', // Enable smooth scrolling (optional)
            WebkitScrollbar: 'none', // Hide scrollbar for WebKit browsers
          };
        }
      },
          methods: {
            async openEditor (){
              try {
                // Call the Go API endpoint
                const response = await fetch(`http://localhost:1337/api/get-file?path=${encodeURIComponent(this.selectedFile)}`, {
                  method: 'GET',
                  credentials: 'include'
                });

                // Handle the response
                if (response.ok) {
                  const text = await response.text();
                  this.fileContent = text;

                } else {
                  const error = await response.text();
                  // document.getElementById("message").innerText = `Error: ${error}`;
                }
                } catch (err) {
                  // document.getElementById("message").innerText = `Request failed: ${err.message}`;
                }
              this.isModalOpen = true;
              this.isDropdownVisible = false;
            },
            closeEditor () {
              this.isModalOpen = false;
            },
            async fixPermissions () {
              try {
                const response = await fetch('http://localhost:1337/api/fix-permissions', {
                  method: 'POST',
                  credentials: 'include',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    Path: this.path
                  })
                });

                if (!response.ok) {
                  throw new Error('Network response was not ok');
                }

                const data = await response.text();
                this.responseMessage = data;
              } catch (error) {
                this.responseMessage = `Error: ${error.message}`;
              }
              this.fetchFiles();
            },
            async saveFile () {
              try {
                const response = await fetch('http://localhost:1337/api/update-file', {
                  method: 'POST',
                  credentials: 'include',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    file_path: this.selectedFile,
                    content: this.fileContent
                  })
                });

                if (!response.ok) {
                  throw new Error('Network response was not ok');
                }

                const data = await response.text();
                this.responseMessage = data;
              } catch (error) {
                this.responseMessage = `Error: ${error.message}`;
              }
              this.isModalOpen = false;
            },
            async applyRename (){
              try {
                // Call the Go API endpoint
                const response = await fetch('http://localhost:1337/api/rename-file', {
                  method: 'POST',
                  credentials: 'include',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    Source: this.selectedFile,
                    Destination: this.path.replace(/\/+$/, '') + "/" + this.selectedFileName
                  })
                });

                // Handle the response
                if (response.ok) {
                  const result = await response.text();
                  // document.getElementById("message").innerText = result;
                } else {
                  const error = await response.text();
                  // document.getElementById("message").innerText = `Error: ${error}`;
                }
              } catch (err) {
                // document.getElementById("message").innerText = `Request failed: ${err.message}`;
              }
              this.renaming = false;
              this.fetchFiles();
            },
            rename() {
              this.renaming = true;
              this.isDropdownVisible = false;
            },
            copy() {
              this.fileToOperate = this.selectedFile;
              this.filenameToOperate = this.selectedFileName;
              this.operation = "copy";
              this.isDropdownVisible = false;
            },
            cut() {
              this.fileToOperate = this.selectedFile;
              this.filenameToOperate = this.selectedFileName;
              this.operation = "cut";
              this.isDropdownVisible = false;
            },
            async download() {
              try {
                // Call the Go API endpoint
                const response = await fetch(`http://localhost:1337/api/download-file?file=${encodeURIComponent(this.selectedFile)}`, {
                  method: 'GET',
                  credentials: 'include'
                });

                // Handle the response
                if (response.ok) {
                  const blob = await response.blob();
                  const link = document.createElement('a');
                  link.href = window.URL.createObjectURL(blob);
                  link.download = this.selectedFileName;
                  document.body.appendChild(link);
                  link.click();
                  document.body.removeChild(link);

                } else {
                  const error = await response.text();
                  // document.getElementById("message").innerText = `Error: ${error}`;
                }
                } catch (err) {
                  // document.getElementById("message").innerText = `Request failed: ${err.message}`;
                }
                this.isDropdownVisible = false;
            },
            async deleteFile() {
              try {
                // Call the Go API endpoint
                const response = await fetch(`http://localhost:1337/api/delete-file?file=${encodeURIComponent(this.selectedFile)}`, {
                  method: 'POST',
                  credentials: 'include'
                });

                // Handle the response
                if (response.ok) {
                  const blob = await response.text();

                } else {
                  const error = await response.text();
                  // document.getElementById("message").innerText = `Error: ${error}`;
                }
                } catch (err) {
                  // document.getElementById("message").innerText = `Request failed: ${err.message}`;
                }
                this.isDropdownVisible = false;
                this.renaming = false;
                this.fetchFiles();
            },
            async compress() {
              try {
                // Call the Go API endpoint
                const response = await fetch(`http://localhost:1337/api/compress-file?path=${encodeURIComponent(this.selectedFile)}`, {
                  method: 'POST',
                  credentials: 'include'
                });

                // Handle the response
                if (response.ok) {
                  const blob = await response.text();

                } else {
                  const error = await response.text();
                  // document.getElementById("message").innerText = `Error: ${error}`;
                }
                } catch (err) {
                  // document.getElementById("message").innerText = `Request failed: ${err.message}`;
                }
                this.isDropdownVisible = false;
                this.renaming = false;
                this.fetchFiles();
            },
            async extract() {
              try {
                // Call the Go API endpoint
                const response = await fetch(`http://localhost:1337/api/extract-file?path=${encodeURIComponent(this.selectedFile)}`, {
                  method: 'POST',
                  credentials: 'include'
                });

                // Handle the response
                if (response.ok) {
                  const blob = await response.text();

                } else {
                  const error = await response.text();
                  // document.getElementById("message").innerText = `Error: ${error}`;
                }
                } catch (err) {
                  // document.getElementById("message").innerText = `Request failed: ${err.message}`;
                }
                this.isDropdownVisible = false;
                this.renaming = false;
                this.fetchFiles();
            },
            async paste() {
              if (this.operation === "copy"){
                try {
                // Call the Go API endpoint
                const response = await fetch('http://localhost:1337/api/copy-file', {
                  method: 'POST',
                  credentials: 'include',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    Source: this.fileToOperate,
                    Destination: this.path.replace(/\/+$/, '') + "/" + this.filenameToOperate
                  })
                });

                // Handle the response
                if (response.ok) {
                  const result = await response.text();
                  // document.getElementById("message").innerText = result;
                } else {
                  const error = await response.text();
                  // document.getElementById("message").innerText = `Error: ${error}`;
                }
                } catch (err) {
                  // document.getElementById("message").innerText = `Request failed: ${err.message}`;
                }
              }
              if (this.operation === "cut"){
                try {
                // Call the Go API endpoint
                const response = await fetch('http://localhost:1337/api/rename-file', {
                  method: 'POST',
                  credentials: 'include',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    Source: this.fileToOperate,
                    Destination: this.path.replace(/\/+$/, '') + "/" + this.filenameToOperate
                  })
                });

                // Handle the response
                if (response.ok) {
                  const result = await response.text();
                  // document.getElementById("message").innerText = result;
                } else {
                  const error = await response.text();
                  // document.getElementById("message").innerText = `Error: ${error}`;
                }
                } catch (err) {
                  // document.getElementById("message").innerText = `Request failed: ${err.message}`;
                }
              }
              this.fetchFiles();
              this.isDropdownVisible = false;
              this.renaming = false;
            },
            triggerFileInput() {
              this.$refs.fileInput.click();
            },
            async handleClickOutside() {
              if (this.$refs.dropdown && !this.$refs.dropdown.contains(event.target)) {
                this.isDropdownVisible = false;
              }
            },
            async handleFileChange(event) {
              this.file = event.target.files[0];

              if (!this.file) {
                this.uploadStatus = 'No file selected!';
                return;
              }
              // Proceed to upload the file
              await this.uploadFile();
            },
            async fetchFiles() {
              try {
                const response = await fetch(`http://localhost:1337/api/list-files?path=${encodeURIComponent(this.path)}`, {
                  method: 'GET',
                  credentials: 'include' // Include credentials with the request
                });

                if (!response.ok) {
                  throw new Error('Network response was not ok');
                }

                this.files = await response.json();

              } catch (error) {
                console.error('Error fetching the list items:', error);
              }
            },
            async uploadFile() {
              if (!this.file) {
                this.uploadStatus = 'No file selected!';
                return;
              }

              if (!this.path) {
                this.uploadStatus = 'Upload path is required!';
                return;
              }

              const formData = new FormData();
              formData.append('file', this.file);

              try {

                const response = await fetch(`http://localhost:1337/api/upload-file?path=${encodeURIComponent(this.path)}`, {
                  method: 'POST',
                  credentials: 'include',
                  body: formData
                });

                if (!response.ok) {
                  throw new Error('File upload failed');
                }

                const result = await response.text();
                this.uploadStatus = `Success: ${result}`;
                await this.fetchFiles();
              } catch (error) {
                this.uploadStatus = `Error: ${error.message}`;
              }
              console.log(this.uploadStatus);
            },
            async updatePath(name) {
              if (!this.path.endsWith('/')) {
                this.path = this.path + "/" + name;
              } else {
                this.path = this.path + name;
              }

              this.fetchFiles();
              this.renaming = false;
            },
            async goBack() {

              if (this.path !== '' && this.path !== '/') {
                // Remove trailing slashes and split the path into segments
                this.path = this.path.replace(/\/+$/, '');
                const segments = this.path.split('/');

                // Remove the last segment
                segments.pop();

                // Join the remaining segments back into a path
                this.path = segments.join('/');

                // Handle the case where the path becomes empty
                if (this.path === '') {
                  this.path = '/';
                }

                // Fetch files with the updated path
                this.fetchFiles();
                this.renaming = false;
              }

            },
            async handleRightClick(file) {
              this.isDropdownVisible = true;
              this.menuPosition = { x: event.clientX, y: event.clientY };
              // Store information about the selected file or item if needed
              this.selectedFileName = file.name;
              this.selectedFile = this.path.replace(/\/$/, '') + "/" + file.name;
              if (this.selectedFile.endsWith(".zip")){
                this.isCompressed = true;
              } else {
                this.isCompressed = false;
              }

              if (file.type !== 'directory'){
                this.isFile = true;
              } else {
                this.isFile = false;
              }

              console.log(this.selectedFile);
              this.renaming = false;
            },
            beforeEnter(el) {
              el.style.opacity = 0;
            },
            enter(el, done) {
              el.offsetHeight; // Trigger a reflow to ensure transition is applied
              el.style.transition = 'opacity 0.3s';
              el.style.opacity = 1;
              done();
            },
            leave(el, done) {
              el.style.transition = 'opacity 0.3s';
              el.style.opacity = 0;
              done();
            },
            updateLineCount() {
        },
        syncScroll(event) {
          const lineNumbers = event.target.previousElementSibling;
          lineNumbers.scrollTop = event.target.scrollTop;
        },
        handleTab(event) {
          if (event.key === 'Tab') {
            event.preventDefault();
            const start = event.target.selectionStart;
            const end = event.target.selectionEnd;
            this.fileContent = this.fileContent.substring(0, start) + '\t' + this.fileContent.substring(end);
            this.$nextTick(() => {
              event.target.selectionStart = event.target.selectionEnd = start + 1;
            });
          }
        }
          }
        });
</script>
</script>
{{ end }}