{{extends "../templates/view.jet"}}
{{block title()}}Redirects{{end}}
{{ block container() }}
    <div class="flex-row flex h-10 justify-center items-center">
        <p class="flex font-semibold text-xs mr-2">Domain: </p>
        <button type="button"  @click="toggleDropdown" ref="dropdown" class="flex mr-2 transition-all text-xs min-w-[12rem] bg-white text-gray-700 py-2 px-4 border-2 border-gray-200 text-left rounded-lg outline-none" id="dropdownButton">
            <div class="flex justify-between">
                <span v-if="selectedItem" v-text="selectedItem" class="text-xs text-gray-700 font-semibold"></span>
                <span v-else>All domains</span>
                <svg class="mt-1 w-2.5 h-2.5 ms-3 inline" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
                </svg>
            </div>
        </button>
        <p class="flex font-semibold text-xs mr-2">From: </p>
        <input class="flex text-xs w-full py-2 px-3 flex-col mr-2 w-40 appearance-none border-b py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
        <p class="flex font-semibold text-xs mr-2">To: </p>
        <input class="flex text-xs w-full py-2 px-3 flex-col mr-2 w-40 appearance-none border-b py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
        <transition @before-enter="beforeEnter" @enter="enter" @leave="leave">
            <div id="dropdownMenu" v-if="isDropdownVisible"
              class="min-w-[13rem] shadow absolute z-10 bg-white divide-y divide-gray-100 border-1 border-blue-500 rounded-lg">
              <div v-for="domain in domains" :key="domain.id" @click="selectItem(domain)" class="text-sm text-gray-700"
                aria-labelledby="dropdownDefaultButton">
                <a v-text="domain"
                  class="font-semibold cursor-pointer transition-all block px-4 py-2 hover:bg-gray-100"></a>
              </div>
            </div>
        </transition>
        <p class="flex font-semibold text-xs mr-2">Status: </p>
        <button type="button"  @click="toggleDropdown" ref="dropdown" class="flex mr-2 transition-all text-xs bg-white text-gray-700 py-2 px-4 border-2 border-gray-200 text-left rounded-lg outline-none" id="dropdownButton">
            <div class="flex justify-between">
                <span v-if="selectedItem" v-text="selectedItem" class="text-xs text-gray-700 font-semibold"></span>
                <span v-else>301</span>
                <svg class="mt-1 w-2.5 h-2.5 ms-3 inline" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
                </svg>
            </div>
        </button>
    </div>

    <!-- Vue.js Application -->
    <script>
            new Vue({
                el: '#app',
                data() {
                    return {
                        message: 'Hello, Vue with Tailwind!',
                        selectedItem: '',
                        domains: [],
                        isDropdownVisible: false,
                        selectedItem: ''
                    };
                },
                async created() {
                    await this.fetchDomains();
                },
                mounted() {
                    document.addEventListener('click', this.handleClickOutside);

                },
                beforeDestroy() {
                    document.removeEventListener('click', this.handleClickOutside);
                },
                methods: {
                    changeMessage() {
                        this.message = 'Message Changed!';
                    },
                    async selectItem(domain) {
                        this.selectedItem = domain;
                        this.isDropdownVisible = false;
                    },
                    async fetchDomains() {
                        try {
                            const response = await fetch('http://localhost:1337/api/list-sites', {
                                method: 'GET',
                                credentials: 'include' // Include credentials with the request
                            });

                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }

                            const sites = await response.json();
                            if (sites !== null) {
                                this.domains = sites.flatMap(site => site.domains);
                                console.log(this.domains);
                            }
                        } catch (error) {
                            console.error('Error fetching the list items:', error);
                        }
                    },
                    handleClickOutside(event) {
                        if (this.$refs.dropdown && !this.$refs.dropdown.contains(event.target)) {
                            this.isDropdownVisible = false;
                        }
                    },
                    beforeEnter(el) {
                        el.style.opacity = 0;
                    },
                    enter(el, done) {
                        el.offsetHeight; // Trigger a reflow to ensure transition is applied
                        el.style.transition = 'opacity 0.3s';
                        el.style.opacity = 1;
                        done();
                    },
                    leave(el, done) {
                        el.style.transition = 'opacity 0.3s';
                        el.style.opacity = 0;
                        done();
                    },
                    toggleDropdown() {
                        this.isDropdownVisible = !this.isDropdownVisible;
                    }
                }
            });
    </script>
{{ end }}